<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="http://af1ash.github.io/atom.xml" rel="self"/>
  
  <link href="http://af1ash.github.io/"/>
  <updated>2024-09-07T08:25:13.073Z</updated>
  <id>http://af1ash.github.io/</id>
  
  <author>
    <name>Af1ash</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>黑客与画家-读书摘录</title>
    <link href="http://af1ash.github.io/2024/09/07/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6/"/>
    <id>http://af1ash.github.io/2024/09/07/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6/</id>
    <published>2024-09-07T08:24:08.733Z</published>
    <updated>2024-09-07T08:25:13.073Z</updated>
    
    <content type="html"><![CDATA[<p>《黑客与画家（10万册纪念版）》</p><p>保罗·格雷厄姆<br>153个笔记</p><p>◆ 前言</p><p>本书尝试解释计算机世界发生了什么事，所以，它不仅仅是写给程序员看的，也适合所有人。比如，第6章讲如何致富，我相信这是所有读者普遍感兴趣的内容。</p><p>黑客？那不是侵入他人计算机的人吗？在外行人看来，这个词的意思就是这样。但是在计算机世界中，黑客指的是专家级程序员。因为本书的目的是解释真实的计算机世界是怎么一回事，所以我决定冒着被误解的风险，按照行业内的定义使用这个词。</p><p>为什么普通人要去关心编程语言？因为如果你想了解黑客，就必须懂一点编程语言。这就好比回到1880年，如果你想理解技术发展，就必须懂一点蒸汽机。<br>计算机程序只是文本而已。你选择什么语言，决定了你能说什么话。编程语言就是程序员的思维方式。</p><p>黑客很在乎言论自由</p><p>为什么黑客那么在乎言论自由？我认为，部分原因在于，革新对于软件行业实在是太重要了，而革新和异端实际上是同一件事。优秀的黑客养成了一种质疑一切的习惯。</p><p>此外，我还认为，行为怪异的人和愤世嫉俗的人比普通人更可能成为黑客。计算机世界就像是智力世界的大西部，在那里没有你不敢想的事情，只要你愿意承担冒险的后果。</p><p>◆ 2 黑客与画家</p><p>黑客的最高境界是创造规格。虽然看起来做到这一点的最好方法就是先做出一个样品把规格实现了。</p><p>要是黑客写论文，最好的情况下，写出来的也只是一些补充性的描述，不会具有太大的实际价值。黑客先开发了一个很酷的软件，然后就写一篇论文，介绍这个软件。论文变成了软件成果的展示。这种结合是错误的，常常会产生问题。为了配合研究性的论文主题，你很容易就把工作重点从开发优美的软件转向开发一些丑陋的东西。</p><p>科学研究必须是能够产生大量成果的，而那些不成熟、障碍重重的领域最容易写出许多篇论文，因为你可以写那些为了完成工作而不得不克服的障碍。没有什么比一个错误的前提更容易产生大量待解决的问题了。人工智能（AI）领域的情况大多符合这条“如何凭空创造出问题”的规律</p><p>如果你假定，使用一系列的谓词逻辑表达式，再加上代表抽象概念的参数，就能表达人类的知识，那么，你就可以写出许许多多的论文，解释如何完成这项工作</p><p>创造优美事物的方式往往不是从头做起，而是在现有成果的基础上做一些小小的调整，或者将已有的观点用比较新的方式组合起来。这种类型的工作很难用研究性的论文表达。</p><p>真正竞争软件设计的战场是新兴领域的市场，这里还没有人建立过防御工事。只要你能做出大胆的设计，由一个人或一批人同时负责设计和实现产品，你就能在这里战胜大公司。微软公司自己一开始就是这样走向成功的，苹果公司和惠普公司也是如此。我觉得几乎所有的创业公司都是这样取得成功的。</p><p>所有创作者都面临这个问题。价格是由供给和需求共同决定的。好玩的软件的需求量，比不上解决客户麻烦问题的软件的需求量；在小剧场里演出的酬劳，比不上穿着卡通大猩猩服装、在展览会上为厂商站台的酬劳；写小说的回报比不上写广告文案的回报；开发编程语言的收入，比不上把某些公司老掉牙的数据库连上服务器的收入。<br>黑客如何才能做自己喜欢的事情？我认为这个问题的解决方法是一个几乎所有创作者都知道的方法：找一份养家糊口的“白天工作”（day job）。这个词是从音乐家身上来的，他们晚上表演音乐，所以白天可以找一份其他工作。更一般地说，“白天工作”的意思是，你有一份为了赚钱的工作，还有一份为了爱好的工作。</p><p>令我惊讶的是，雇主都很犹豫，不愿意手下的黑客为开源软件项目工作。但是，在Viaweb，要是你不愿意这样干，我们会很犹豫要不要雇用你。我们在面试程序员时，主要关注的事情就是业余时间他们写了什么软件，因为如果你不爱一件事，你不可能把它做得真正优秀，要是你很热爱编程，你就不可避免地会开发你自己的项目。7</p><p>也许对于黑客来说，采取像画家这样的做法很有好处：应该定期地从头开始，而不要长年累月地在一个项目上不断工作，并且试图把所有的最新想法都以修订版的形式包括进去。</p><p>同样，黑客可以通过观看优秀的程序学会编程，不是看它们的执行结果，而是看它们的源代码。开源运动最鲜为人知的优点之一，就是使得学习编程变得更容易了。</p><p>你不能盼望先有一个完美的规格设计，然后再动手编程，这样想是不现实的。如果你预先承认规格设计是不完美的，在编程的时候，就可以根据需要当场修改规格，最终会有一个更好的结果。</p><p>眼下想必每个人都知道，过早优化是一件危险的事情。我认为，我们应该对“过早设计”也抱有同样的担忧，不要太早决定一个程序应该怎么做。</p><p>坚持一丝不苟，就能取得优秀的成果，因为那些看不见的细节累加起来，就变得可见了。</p><p>为了做出优秀的工作，你必须把这种心理周期考虑在内。只有这样，你才能根据不同的事情找出不同的应对方法。</p><p>程序必须写得能够供人们阅读，偶尔供计算机执行。</p><p>很遗憾，这个问题很难回答。声望这个东西，总是经过漫长的时滞以后才会确立，它就像遥远星系发出的光，经过了许多光年才能被我们看到。</p><p>◆ 机制</p><p>我还想到了第五种方法，可以找出“不能说的话”，那就是去观察禁忌是如何产生的。某种道德观念到底是怎么出现的，又是怎么被其他人接受的？如果我们能够理解它的产生机制，可能就可以应用于我们自己的时代。</p><p>◆ 为什么这样做</p><p>优秀作品往往来自其他人忽视的想法，而最容易被忽视的想法就是那些被禁止的思想观点。</p><p>在科学领域，质疑他人的结论和公认的假设是尤其重要的一件事，会提供巨大的科学创造的机会。科学家（或者至少是优秀科学家）做事的方式，准确地说，就是寻找传统观点无法自圆其说的地方，然后试着拆开那里，看个究竟，瞧瞧里面到底出了什么问题。新的理论就是这样产生的。</p><p>◆ 守口如瓶</p><p>一旦发现了“不能说的话”，下一步怎么办？我的建议就是别说，至少也要挑选合适的场合再说，只打那些值得打的仗。</p><p>这时你要明白，自由思考比畅所欲言更重要。如果你感到一定要跟那些人辩个明白，绝不咽下这口气，一定要把话说清楚，结果很可能是从此你再也无法自由理性地思考了。我认为这样做不可取，更好的方法是在思想和言论之间划一条明确的界线。在心里无所不想，但是不一定要说出来。我就鼓励自己在心里默默思考那些最无法无天的想法。你的思想是一个“地下组织”，绝不要把那里发生的事情一股脑说给外人听。</p><p>◆ 永远质疑</p><p>如果自己就是潮水的一部分，怎么能看见潮流的方向呢？你只能永远保持质疑：什么话是我不能说的？为什么？</p><p>◆ 4 良好的坏习惯</p><p>在大众眼里，“黑客”（hacker）就是入侵计算机的人。可是，在程序员眼里，“黑客”指的是优秀程序员。这两个含义其实是相关的。对于程序员来说，“黑客”这个词的字面意思主要就是“精通”，也就是他可以随心所欲地支配计算机。</p><p>◆ 软件的发布</p><p>你不会对互联网软件做出这样的承诺，因为它根本没有“版本”这个概念。你的软件是连续性渐变的，某些更新也许比较重大，但是“版本”这个概念不适用于互联网软件。</p><p>◆ 客户支持</p><p>我们的这种方法让所有人都感到满意。客户很高兴，拨打厂商服务热线是免费的，而且还被当作通风报信的人，受到郑重对待；客服人员也喜欢这样，因为这使得他们可以帮助用户，而不是对着用户读操作手册；程序员喜欢这样，因为他们能够再现bug，而不是通过模糊不清的二手报告了解bug。</p><p>◆ 全身心投入</p><p>大公司的做法不是立刻实现新功能，而是先为新功能做一个计划。Viaweb就因此而遇到了麻烦。投资者和分析家会问，你们对未来有何计划。真实的回答是，我们没有任何计划。我们有改进的想法，但是如果我们想到应该怎么改进，就已经把它实现了。接下来6个月我们要做什么？进行所有能想到的最佳改进。我不知道自己是否有胆量公开这么说，但这是实话。计划这个词，只是将构思束之高阁的另一种表达方式。只要想到好的构思，我们就会立刻着手实现。</p><p>它适用于小型的、由优秀且可靠的程序员组成的开发团队，不适用于大型的、充斥着大量平庸之辈的软件公司，在那里不是程序员想出好的构思，而是一个委员会集体批准坏的构思。</p><p>◆ 关注用户</p><p>效率对互联网软件至关重要，因为硬件费用由你支付。你的资本支出成本除以服务器所能支持的最大用户数量，就是你为每个用户付出的成本。</p><p>◆ 勉强够用的网页</p><p>互联网软件的开发成本低，即使是最小型的公司，也可以很容易地制作和发布。互联网软件做起来很辛苦，还有许多特别大的压力，但是这样只会使得创业公司成功的机会变大。</p><p>◆ 为什么不尝试一下</p><p>首先，管理企业其实很简单，只要记住两点就可以了：做出用户喜欢的产品，保证开支小于收入。只要做到这两点，你就会超过大多数创业公司。随着事业的发展，你自己就能琢磨出来其他的诀窍。</p><p>低端的用户要求简化操作和清晰易懂，高端的用户要求你增加新功能。软件最大的好处就是让一切变得简单。</p><p>不要只因为对方的头衔是市场专家、设计师或产品经理，就盲目听从他们的话。如果他们的观点真的很好，那就听从他们，关键是你要自己判断，不要盲从。只有懂得设计的黑客，才能设计软件，不能交给对软件一知半解的设计师。如果你不打算自己动手设计和开发，那就不要创业。</p><p>◆ 6 如何创造财富</p><p>如果你想致富，应该怎么做？我认为最好的办法就是自己创业，或者加入创业公司。</p><p>创业公司往往与技术有关，所以“高技术创业公司”这个短语几乎就是同义重复。创业公司其实就是解决了某个技术难题的小公司。</p><p>◆ 一个命题</p><p>从经济学观点看，你可以把创业想象成一个压缩过程，你的所有工作年份被压缩成了短短几年。你不再是低强度地工作40年，而是以极限强度工作4年。在高技术领域，这种压缩的回报尤其丰厚，工作效率越高，额外报酬就越高。</p><p>创业公司不是变魔术。它们无法改变创造财富的法则，它们只是代表了财富创造曲线远端上的一点。这里有一个守恒定律：如果你想赚100万美元，就不得不忍受相当于100万美元的痛苦。</p><p>◆ 金钱不等于财富</p><p>创造有价值的东西就是创造财富。你最好先搞清楚什么是财富。财富与金钱并不是同义词。3财富存在的时间与人类历史一样长久，甚至更长久，事实上蚂蚁也拥有财富。金钱是一种历史相对较短的发明。</p><p>◆ 手工艺人</p><p>所以，在程序员看来，事情再明显不过，财富就是被做出来的，而不是某个想象出来的神秘人物分发的大饼。</p><p>另一件程序员看来显而易见的事情就是创造财富的速率存在巨大的差异</p><p>我们这个世界，你向下沉沦或者向上奋进都取决于你自己，不能把原因推给外界。</p><p>◆ 工作是什么</p><p>公司一切行为的目的都是盈利，从而生存下去。创造财富是大多数公司盈利的手段。</p><p>几乎所有情况下，公司的存在目的就是满足人们的某种需要。</p><p>工作就是在一个组织中，与许多人共同合作，做出某种人们需要的东西。</p><p>◆ 可测量性和可放大性</p><p>要致富，你需要两样东西：可测量性和可放大性。你的职位产生的业绩应该是可测量的，否则你做得再多，也不会得到更多的报酬。此外，你还必须有可放大性，也就是说你做出的决定能够产生巨大的效应。</p><p>◆ 小团队 &#x3D; 可测量性</p><p>大公司就像巨型的古罗马战舰，1 000个划船手共同划桨，推动它前进。但是，两个因素使得它快不起来：一个因素是，每个划船手看不到自己更努力划桨有何不同；另一个因素是，1 000人的团队使得任何个人的努力都被大大地平均化了。</p><p>◆ 高科技 &#x3D; 可放大性</p><p>什么是技术？技术就是某种手段，就是我们做事的方式。如果你发现了一种做事的新方式，它的经济价值就取决于有多少人使用这种新方式。技术就是钓鱼的鱼竿，而不是那条鱼。</p><p>小团队天生就适合解决技术难题。技术的发展是非常快的，今天很有价值的技术，几年后可能就会丧失价值。小团队在如今这个时代可谓如鱼得水，因为他们不受官僚主义和烦琐管理制度的拖累。而且，技术的突破往往来自非常规的方法，小团队就较少受到常规方法的约束。</p><p>创业公司就像游击队一样，喜欢选择不易生存的深山老林作为根据地，政府的正规军无法追到那种地方。我还记得创业初期我们是多么筋疲力尽，整天都为一些可怕的技术难题绞尽脑汁。但是，我还是感到相当高兴，因为那些问题连我们都觉得这么困难，那么竞争对手就更会认为是不可能解决的。</p><p>如果你有一个新点子，你去找风险投资人，问他是否投资，他首先就会问你几个问题，其中之一就是其他人复制你的模式是否很困难。也就是说，你为竞争对手设置的壁垒有多高。</p><p>俗话说得好，最好的防御就是进攻。如果你开发出来的技术是竞争对手难以复制的，那就够了，你不需要依靠其他防御手段了。一开始就选择较难的问题，此后的各种决策都选择较难的那个选项。</p><p>◆ 潜规则</p><p>真正创业以后，你的竞争对手决定了你到底要有多辛苦，而他们做出的决定都是一样的：你能吃多少苦，我们就能吃多少苦。</p><p>◆ 用户数量</p><p>财富就是人们需要的东西，如果没人使用你的软件，可能不是因为你的推广活动很失败，而是因为你没有做出人们需要的东西。</p><p>开办创业公司不是单纯地为了解决问题，而是为了解决那些用户关心的问题。</p><p>所以，我认为你应该和买家一样，也把用户数量当作一个测试指标。像优化软件一样优化公司，用户数量就是判断公司表现好坏的指标。做过软件优化的人都知道，优化难点就是如何测出系统的表现。如果凭空猜测软件最慢的是哪一部分以及怎样让它快起来，那估计百分之百会猜错。<br>用户数量也许不是最好的测量指标，但应该也相差不远了。买家关心它，收入依赖它，竞争对手恐惧它，记者和潜在用户则是被它打动。无论你的技术水平有多高，用户数量都比你自己的判断更能准确反映哪些问题应该优先解决。</p><p>现在，黑客都已经熟知这一点，并总结出一个术语“过早优化”。尽快拿出1.0版，然后根据用户的反映而不是自己的猜测优化软件。</p><p>你必须时刻牢记的最基本的原则就是，创造人们需要的东西，也就是创造财富。如果你想通过创造财富致富，那么你必须知道人们需要什么。</p><p>◆ 财富和权力</p><p>缓慢工作的后果并不仅仅是延迟了技术革新，而且很可能会扼杀技术革新。只有在快速获得巨大利益的激励下，你才会去挑战那些困难的问题，否则你根本不愿意去碰它们。开发新技术是非常痛苦的经历，正如爱迪生所说，1%的灵感加上99%的汗水。没有财富的激励，就不会有人愿意去做技术革新</p><p>工程师愿意接受普通薪水去做一些诱人的项目（比如战斗机和登月火箭），而与日常生活关系更密切的技术革新（比如电灯泡和半导体）只能由创业者来发明。</p><p>创业并不只是过去20年发生在硅谷的事情。如今，通过创造财富而致富已经成了普遍的模式。每一个这样做的人差不多应用了同样的诀窍：可测量性和可放大性。前者来自小团队的合作，后者来自开发新技术。</p><p>◆ 财富的老爹模式</p><p>那些专门把运动员和CEO的收入拿出来说事的社论让我想到了中世纪的基督教教士。他们宁愿高谈阔论地球是不是圆的，也不愿亲自研究一下现实中的证据。5一个人的工作具有多少价值不是由政府决定的，而是由市场决定的。</p><p>7 我们把由父母供给收入的模式称为“老爹模式”。这个模式与真实世界的最大区别之一就是对勤奋工作的评价不同。在老爹模式中，勤奋工作本身就是值得的，老爹会感到很高兴。但是在现实中，财富是用工作成果衡量的，而不是用它花费的成本衡量的。如果我用牙刷粉刷房屋，屋主也不会付给我额外工资的。所以，对于那些仍然处于“老爹模式”中的人来说，看到有人勤奋工作却没有得到很多报酬就会感到不公平。为了破除这种迷思，让我们假设有一个工人，他单独一人在荒岛上打猎和采集水果。如果他的能力不足，就算非常勤奋地工作，最后也不会得到很多食物。这是不公平吗？又是谁对他不公平呢？<br>“不公平”这三个字就是“老爹模式”的标志。为什么别的情况下人们不会想到这三个字？因为要是你现在还处于“老爹模式”，认为财富就是从某个口子流出来、被大家分享的东西，而不是来源于满足他人的需求的创造活动，那么当你注意到有些人赚钱比其他人多得多时，你就会不偏不倚地得出“不公平”这个结论。</p><p>◆ 偷窃</p><p>很多人对贫富分化不满意的第二个原因就是，在大部分的人类历史中，积累财富最常见的方法其实是偷窃。游牧社会是偷别人的牲口，农业社会是征税（和平时期）和直接掠夺（战争时期）。<br>在战争中，胜利的一方将失败一方的财产全部占为</p><p>在控制程度更高的社会，统治者和官僚阶层用税收代替直接充公。但是，根本的一点并没有变，那就是致富的方法不是创造财富，而是以统治者的强权进行搜刮掠夺。</p><p>封建社会只有两个阶级：贵族与农奴（为贵族服务的人）。中产阶级是一个新的第三类团体，他们出现在城镇中，以制造业和贸易为生。</p><p>中产阶级的出现使得财富总量不再是一个固定不变的值，财富的分配也不再是一种零和游戏。苹果公司的两个创始人乔布斯和沃兹尼亚克没有使得他人变得更贫穷就赚到了钱。事实上，他们创造出来的东西使得人类的物质生活变得更富有。他们只能这样做，否则不会有人付钱给他们的。</p><p>◆ 技术的杠杆效应</p><p>首先，技术肯定加剧了有技术者与无技术者之间的生产效率差异，毕竟这就是技术进步的目的。一个勤劳的农民使用拖拉机比使用马可以多耕6倍的田，但是前提条件是他必须掌握如何使用新技术。</p><p>技术变得更便宜的唯一东西，就是品牌。这正是为什么我们现在越来越多地听到品牌这个词。富人与穷人之间生活的鸿沟正在缩小，品牌是这种差距的遗留物。</p><p>无论在物质上，还是在社会地位上，技术好像都缩小了富人与穷人之间的差距，而不是让这种差距扩大了。</p><p>◆ 公理的不同意见</p><p>我想提出一种相反的观点：现代社会的收入差距扩大是一种健康的信号。技术使得生产率的差异加速扩大，如果这种扩大没有反映在收入上面，只有三种可能的解释：（a）技术革新停顿了；（b）那些创造大部分财富的人停止工作了；（c）创造财富的人没有获得报酬。</p><p>在历史的不同时点，你是否能够通过创造财富而致富就是这样一种打开和关闭的循环过程：</p><p>打开时，财富创造活动就出现了，关闭时，财富创造活动就消失了，这就好像电扇和噪声的那种相伴关系。</p><p>◆ 8 防止垃圾邮件的一种方法1</p><p>说实话，如今的大多数垃圾邮件过滤器就像杀虫剂一样，唯一的作用就是创造出杀不死的新品种害虫。</p><p>◆ 9 设计者的品味</p><p>喜欢一件东西，却不知道为什么自己喜欢它，原因可能是这件东西是美的，但也可能是他们的母亲也拥有同样的东西，或者杂志上某个明星在使用它，或者仅仅是它的价格很昂贵。人类的思想就是没有经过整理的无数杂念的混合。</p><p>把品味说成个人偏好可以有效地杜绝争论，防止人们争执哪一种品味更好。但是问题是，这种说法是不正确的。只要你自己开始动手设计东西，就能明白这一点。</p><p>好设计是简单的设计。</p><p>当你被迫把东西做得很简单时，你就被迫直接面对真正的问题。当你不能用表面的装饰交差时，你就不得不做好真正的本质部分。</p><p>好设计是永不过时的设计</p><p>以永不过时作为目标是一种帮助自己找到最佳答案的方法：如果你不愿别人的答案取代你的答案，你就只好自己给出最佳答案。</p><p>如果一件东西长盛不衰，那么它的吸引力一定来自本身的魅力，而不是来自风潮的影响。</p><p>好设计是解决主要问题的设计。</p><p>好设计是启发性的设计。</p><p>好设计通常是有点趣味性的设计。</p><p>好设计是艰苦的设计。</p><p>困难的问题需要巨大的付出才能解决，高难度的数学证明需要结构非常精细的解决方法（往往做起来很有趣），工程学也是如此。</p><p>当你攀登高山时，必须扔掉一切不必要的装备。在困难地点或预算不足的条件下，建筑师就只能做出很简练的设计。当解决难题成为压倒一切的任务时，那些流行样式与华丽装饰就被抛到一边去了。</p><p>并非所有的痛苦都是有益的。世界上有有益的痛苦，也有无益的痛苦。你需要的是咬牙向前冲刺的痛苦，而不是脚被钉子扎破的痛苦。解决难题的痛苦对设计师有好处，但是对付挑剔的客户的痛苦或者对付质量低劣的建材的痛苦就是另外一回事了。</p><p>好设计是看似容易的设计</p><p>在大多数领域，看上去容易的事情，背后都需要大量的练习。练习的作用也许是训练你把刻意为之的事情变成一种自觉的行为。有时，我们的训练只是为了让身体形成下意识的反应。优秀钢琴家弹奏名曲可以不经过大脑直接完成，艺术家也是这样，熟练以后，脑海中的艺术形象会自动从手上流淌出来，仿佛有人在一旁为他打节奏一样。<br>人们有时会说自己有了“状态”，我的理解是，他们这时可以控制自己的脊髓。脊髓是更本能的反应，在面对难题时，它能释放你的直觉。</p><p>好设计是对称的设计</p><p>在数学和工程学中，递归尤其有用。归纳式证明方法既简洁又美妙。在软件中，能用递归解决的问题通常代表已经找到了最佳解法。</p><p>好设计是模仿大自然的设计</p><p>好设计是一种再设计。</p><p>好设计是能够复制的设计</p><p>唯一达到“奇特”的方法，就是追求做出好作品，完成之后再回过头看。</p><p>好设计是成批出现的。</p><p>推动人才成批涌现的最大因素就是，让有天赋的人聚在一起，共同解决某个难题。互相激励比天赋更重要，达·芬奇之所以成为达·芬奇，主要原因不仅仅是他的天赋，更重要的是他生活在当时的佛罗伦萨，而不是米兰。</p><p>在历史的任何时刻都有一些热点项目，一些团体在这些项目上做出伟大的成绩。如果你远离这些中心，几乎不可能单靠自己就取得伟大成果。在某种程度上，你个人最多可以对趋势产生一定的影响，但是你不可能决定趋势，实际上是趋势决定了你。</p><p>好设计常常是大胆的设计。</p><p>做出优秀作品的秘诀就是：非常严格的品味，再加上实现这种品味的能力。</p><p>◆ 机器语言</p><p>一个操作所需的代码越多，就越难避免bug，也越难发现它们。</p><p>◆ 高级语言</p><p>编译器不是高级语言唯一的实现方法，另一种方法是使用解释器，它的作用是实时地将代码解释为相应的机器语言，然后一行行运行。相比之下，编译器则是先将整个程序全部翻译成机器语言，然后再运行。</p><p>◆ 语言的战争</p><p>如果你长期使用某种语言，你就会慢慢按照这种语言的思维模式进行思考。所以，后来当你遇到其他任何一种有重大差异的语言，即使那种语言本身并没有任何不对的地方，你也会觉得它极其难用。缺乏经验的程序员对于各种语言优缺点的判断经常被这种心态误导。</p><p>◆ 11 一百年后的编程语言</p><p>任何一种编程语言都可以分成两大组成部分：基本运算符的集合（扮演公理的角色）以及除运算符以外的其他部分（原则上，这个部分可以用基本运算符表达出来）。</p><p>你仔细审视一种语言的内核，考虑哪些部分可以被摒弃，这至少也是一种很有用的训练。在长期的职业生涯中，我发现冗余的代码会导致更多冗余的代码，不仅软件如此，对于像我这样性格懒散的人，我发现在床底下和房间的角落里这个命题也成立，一件垃圾会产生更多的垃圾。</p><p>编程语言进化缓慢的原因在于它们并不是真正的技术。语言只是一种书写法，而程序则是一种严格符合规则的描述，以书面形式记录计算机应该如何解决你的问题。</p><p>我已经预测了一旦未来硬件性能大幅提高将会发生什么事：新增加的运算能力都会被糟蹋掉。</p><p>对速度的追求是人类内心深处根深蒂固的欲望。当你看着计算机这个小玩意，就会不由自主地希望程序运行得越快越好，真的要下一番功夫才能把这种欲望克制住。在设计编程语言的时候，我们应该有意识地问自己，什么时候可以放弃一些性能，换来一点点便利性的提高。</p><p>正确做法应该是将语言的语义与语言的实现予以分离。在语义上不需要同时存在列表和字符串，单单列表就够了。而在实现上做好编译器优化，使它在必要时把字符串作为连续字节的形式处理。</p><p>效率低下的软件并不等于很烂的软件。一种让程序员做无用功的语言才真正称得上很烂。浪费程序员的时间而不是浪费机器的时间才是真正的无效率。随着计算机速度越来越快，这会变得越来越明显。</p><p>面向对象编程使得你有办法对面条式代码进行可持续性开发。通过不断地打补丁，它让你将软件一步步做大。大公司总是倾向于采用这样的方式开发软件。我预计一百年后也是如此。</p><p>在任何学术领域，都有一些题目是可以做的，另一些题目是不可以做的。不幸的是，这两类题目的区别通常取决于它们写成论文后看上去是不是很高深，而不是取决于它们对软件业的发展是否重要。最极端的例子可能就是文学，文学研究者的任何成果几乎对文学创作者毫无影响。</p><p>你也许觉得，对于人类这样懒惰的生物，喜欢用最省力的方式写程序是再自然不过的事情。但是事实上，我们的思想可能往往会受限于某种现存的语言，只采用在这种语言看来更简单的形式，它对我们思想的束缚作用会大得令人震惊。新语言必须靠你自己去发现，不能依靠那些让你自然而然就沉下去的思维定势。</p><p>学习开车的时候，一个需要记住的原则就是要把车开直，不是通过将车身对齐画在地上的分隔线，而是通过瞄准远处的某个点。即使你的目标只在几米开外，这样做也是正确的。</p><p>◆ 秘密武器</p><p>一般情况是，创业公司要么赢得一切，要么彻底失败。你要么成为富翁，要么一无所获。在创业的时候，如果你选择了错误的技术，竞争对手就会一举打败你。</p><p>选择使用哪一种技术的时候，你不能考虑别人的做法，只能考虑什么样的技术能最好地完成工作。</p><p>◆ Blub困境</p><p>它没有得到广泛使用就是因为编程语言不仅仅是技术，也是一种习惯性思维，非常难于改变。</p><p>编程语言的编程能力有差异</p><p>◆ 创业公司的合气道7</p><p>技术的变化速度通常是很快的，但是编程语言不一样，与其说它是技术，还不如说是程序员的思考模式。编程语言是技术和宗教的混合物。9所以，一种很普通的编程语言就是很普通的程序员使用的语言，它的变化就像冰山那样缓慢。</p><p>如果你为创业公司工作，那么这里有一个评估竞争对手的妙招——关注他们的招聘职位。他们网站上的其他内容无非是一些陈腐的照片和夸夸其谈的文字，但是招聘职位却不得不写得很明确，反映出他们到底想干什么，否则就会引来一大批不合适的求职者。</p><p>◆ 13 书呆子的复仇</p><p>那些经理奇迹般地同时具备了两种很常见但很难结合在一起的特点：（a）对技术一无所知；（b）对技术有强烈的个人观点。</p><p>◆ 朝着数学的方法发展</p><p>Lisp和Fortran代表了编程语言发展的两大方向。前者的基础是数学，后者的基础是硬件架构。</p><p>◆ 向心力</p><p>使用一种不常见的语言会出现的问题我想到了三个：你的程序可能无法很好地与使用其他语言写的程序协同工作；你可能找不到很多函数库；你可能不容易雇到程序员。</p><p>乔纳森·埃里克森说现在是“编程语言的文艺复兴时期”，我想最大的原因就是有了服务器端软件。</p><p>随着软件从桌面端向服务器端转移（连微软公司都看出这是未来的趋势），逼迫你使用某一种语言的限制将越来越少。</p><p>到目前为止，大家公认少于10个人的团队最适合开发软件。雇用这样规模的开发团队，只要使用的不是无人知道的语言，应该都不会遇到很大麻烦。如果你无法找到10个Lisp程序员，那么你可能选错了创立软件公司的城市。</p><p>你不能让那些衣冠楚楚、西装革履的家伙替你做技术决策。</p><p>◆ 随大流的代价</p><p>衡量语言的编程能力的最简单方法可能就是看代码数量。所谓高级语言，就是能够提供更强大的抽象能力的语言，从某种意义上，就像能够提供更大的砖头，所以砌墙的时候用到的砖头数量就变少了。因此，语言的编程能力越强大，写出来的程序就越短（当然不是指字符数量，而是指独立的语法单位）。</p><p>◆ 一个诀窍</p><p>因为你知道，总的来说，你的经理其实不关心公司是否真的能获得成功，他真正关心的是不承担决策失败的责任，所以对他个人来说，最安全的做法就是跟随大多数人的选择。</p><p>技术本来就应该是尖端的。正如伊兰·盖特（Erann Gat）所说，编程语言的所谓业界最佳实践，实际上不会让你变成最佳，只会让你变得很平常。如果选择的编程语言使得开发软件的速度只有（选择更激进技术的）对手的几分之一，那么“最佳实践”真的起错了名字。</p><p>第一，不同语言的编程能力不一样。第二，大多数经理故意忽视第一点。你把这两点事实结合起来，其实就得到了赚钱的诀窍。</p><p>◆ 流行的秘诀</p><p>虽然语言的核心功能就像大海的深处，很少有变化，但是函数库和开发环境之类的东西就像大海的表面，一直在汹涌澎湃</p><p>◆ 外部因素</p><p>如果你想设计一种流行的编程语言，就不能只是单纯地设计语言本身，还必须为它找到一个依附的系统，而这个系统也必须流行。</p><p>◆ 可编程性</p><p>你应该敞开胸怀，欢迎这种揣测。对于制造工具的人来说，总是会有用户以违背你本意的方式使用你的工具。</p><p>一种真正优秀的编程语言应该既整洁又混乱。“整洁”的意思是设计得很清楚， 内核由数量不多的运算符构成，这些运算符易于理解，每一个都有很完整的独立用途。“混乱”的意思是它允许黑客以自己的方式使用。</p><p>◆ 时间</p><p>所以，发明新事物的人必须有耐心，要长年累月不断地做市场推广，直到人们开始接受这种发明。</p><p>人们真正注意到你的时候，不是第一眼看到你站在那里，而是发现过了这么久你居然还在那里。</p><p>◆ 再设计</p><p>为了写出优秀软件，你必须同时具备两种互相冲突的信念。一方面，你要像初生牛犊一样，对自己的能力信心万丈；另一方面，你又要像历经沧桑的老人一样，对自己的能力抱着怀疑态度。在你的大脑中，有一个声音说“千难万险只等闲”，还有一个声音却说“早岁那知世事艰”。</p><p>如果你能平衡好希望和担忧，它们就会推动项目前进，就像自行车在保持平衡中前进一样。</p><p>文章可以修改到你满意为止，但是软件的修改通常来说可以无休止地进行下去。文章的读者不可能抱怨修改后新增加的内容让他们前后的思想产生了不协调，但是软件的使用者就会抱怨修改后的版本有不兼容问题。</p><p>一种可能的解决方法是，将软件内部的接口设计成垂直接口而不是水平接口。这意味着软件内部的模块是一个个垂直堆积起来的抽象层，层与层之间的接口完全由其中的一层控制。如果较高的一层使用了较低的一层定义的语言，那么接口就由较低的一层控制；如果较低的一层从属于较高的一层，那么接口就由较高的一层控制。</p><p>◆ 15 设计与研究</p><p>设计与研究的区别看来就在于，前者追求“好”，后者追求“新”。优秀的设计不一定很“新”，但必须是“好”的；优秀的研究不一定很“好”，但必须是“新”的。</p><p>可是，让用户满意并不等于迎合用户的一切要求。用户不了解所有可能的选择，也经常弄错自己真正想要的东西。做一个好的设计师就像做一个好医生一样。你不能头痛医头，脚痛医脚。病人告诉你症状，你必须找出他生病的真正原因，然后针对病因进行治疗。</p><p>在软件领域，贴近用户的设计思想被归纳为“弱即是强”（Worse is Better）模式2。这个模式实际上包含了好几种不同的思想，所以至今人们还在争论它是否真的成立。但是， 其中有一点是正确的，那就是如果你正在设计某种新东西，就应该尽快拿出原型，听取用户的意见。</p><p>有时候，更少的功能（弱）反而是更好的选择（强），因为这会使得软件的可用性提高。相比那些体积庞大、功能全面、较难上手的软件，一种功能有限但易于使用的软件可能对用户有更大的吸引力。</p><p>与之对照，还有另一种软件设计思想，也许可以被称为“万福玛丽亚”模式。它不要求尽快拿出原型，然后再逐步优化，它的观点是你应该等到完整的成品出来以后再一下子隆重地推向市场，就像圣母玛丽亚降临一样，哪怕整个过程漫长得像橄榄球运动员长途奔袭、达阵得分也没有关系。在互联网泡沫时期，无数创业公司因为相信了这种模式而自毁前程。我还没听说过有人采用这种模式而获得成功。</p><p>先做出原型，再逐步加工做出成品，这种方式有利于鼓舞士气，因为它使得你随时都可以看到工作的成效。在开发软件的时候，我有一条规则：任何时候，代码都必须能够运行。如果你正在写的代码一个小时之后就可以看到运行结果，这好比让你看到不远处就是唾手可得的奖励，你因此会受到激励和鼓舞。</p><p>士气也可以解释为什么很难为低端用户设计出优秀产品，因为优秀设计的前提是你自己必须喜欢这种产品，否则你不可能对设计有兴趣，更不要说士气高昂了。为了把产品设计好，你必须对自己说“哇，这个产品太棒了，我一定要设计好！”，而不是心想：“这种垃圾玩意，只有傻瓜才会喜欢，随便设计一下就行了。”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;《黑客与画家（10万册纪念版）》&lt;/p&gt;
&lt;p&gt;保罗·格雷厄姆&lt;br&gt;153个笔记&lt;/p&gt;
&lt;p&gt;◆ 前言&lt;/p&gt;
&lt;p&gt;本书尝试解释计算机世界发生了什么事，所以，它不仅仅是写给程序员看的，也适合所有人。比如，第6章讲如何致富，我相信这是所有读者普遍感兴趣的内容。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="读书" scheme="http://af1ash.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
    <category term="读书" scheme="http://af1ash.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
    <category term="摘录" scheme="http://af1ash.github.io/tags/%E6%91%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>文件上传的不同种实现</title>
    <link href="http://af1ash.github.io/2024/08/18/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0/"/>
    <id>http://af1ash.github.io/2024/08/18/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-08-18T05:09:24.366Z</published>
    <updated>2024-08-18T05:10:41.065Z</updated>
    
    <content type="html"><![CDATA[<p>基于Fastapi实现三种不同的文件上传接口</p><p>第一种是基于Form将文件全部读取成byte传输到服务端，客户端请求需要包装报文。</p><p>第二种是基于Form使用UploadFile类实现，调用时需要创建文件对象，不需要读取整个文件，服务端可以得到文件名称等原始信息。客户端请求需要包装报文。</p><p>第三种是不使用Form，请求的body为上传文件的字节码，接口实现需要以request为参数，手动获取body内容并保存。</p><h1 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h1><p>接口实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/files/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_file</span>(<span class="params">file: <span class="built_in">bytes</span> = File(<span class="params">...</span>)</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tmp&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(file)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;file_size&quot;</span>: <span class="built_in">len</span>(file)&#125;</span><br></pre></td></tr></table></figure><p>接口调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_files</span>():</span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1:8000/files&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test/cases/1.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        bin_data = f.read()</span><br><span class="line"></span><br><span class="line">    data: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">bytes</span>] = &#123;<span class="string">&#x27;file&#x27;</span>: bin_data&#125;</span><br><span class="line"></span><br><span class="line">    r = requests.post(url=url, data=data, headers=header)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.content)</span><br></pre></td></tr></table></figure><h1 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h1><p>接口实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/uploadfile/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_upload_file</span>(<span class="params">file: UploadFile = File(<span class="params">...</span>), </span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;filename&quot;</span>: file.filename&#125;</span><br></pre></td></tr></table></figure><p>接口调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_uploadfile</span>():</span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1:8000/uploadfile&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test/cases/1.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        bin_data = f.read()</span><br><span class="line">    data: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>] = &#123;</span><br><span class="line">        <span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;test/cases/1.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    r = requests.post(url=url, files=data, headers=header)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(r.content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.content)</span><br></pre></td></tr></table></figure><h1 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h1><p>接口实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&#x27;/uploadfile_by_body/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_file_from_body</span>(<span class="params">request: Request</span>):</span><br><span class="line">    data = <span class="keyword">await</span> request.body()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tmp&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;body&#x27;</span>: data&#125;</span><br></pre></td></tr></table></figure><p>接口调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_uploadfile_by_body</span>():</span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1:8000/uploadfile_by_body&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test/cases/1.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        bin_data = f.read()</span><br><span class="line"></span><br><span class="line">    header = &#123;&#125; </span><br><span class="line"></span><br><span class="line">    r = requests.post(url=url, files=bin_data, headers=header)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(r.content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.content)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;基于Fastapi实现三种不同的文件上传接口&lt;/p&gt;
&lt;p&gt;第一种是基于Form将文件全部读取成byte传输到服务端，客户端请求需要包装报文。&lt;/p&gt;
&lt;p&gt;第二种是基于Form使用UploadFile类实现，调用时需要创建文件对象，不需要读取整个文件，服务端可以得到文件名</summary>
      
    
    
    
    <category term="笔记" scheme="http://af1ash.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="http" scheme="http://af1ash.github.io/tags/http/"/>
    
    <category term="fastapi" scheme="http://af1ash.github.io/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>Django应用动静分离部署实现</title>
    <link href="http://af1ash.github.io/2024/06/09/django_deploy/"/>
    <id>http://af1ash.github.io/2024/06/09/django_deploy/</id>
    <published>2024-06-09T03:28:22.045Z</published>
    <updated>2024-09-08T06:33:49.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h2><p>django + gunicorn + nginx</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>数据接口与静态文件接口分离</p><h4 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h4><ol><li>debug模式下，开发服务器是可以正常使用</li><li>使用gunicorn提供静态文件接口+业务实现接口</li><li>动静分离：nginx提供静态文件服务，动态接口转发至gunicorn</li></ol><h4 id="Allow-hosts"><a href="#Allow-hosts" class="headerlink" title="Allow_hosts"></a>Allow_hosts</h4><p>配置服务访问IP</p><h4 id="gunicorn"><a href="#gunicorn" class="headerlink" title="gunicorn"></a>gunicorn</h4><p>配置</p><p>启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/pipeline_model</span><br><span class="line">$ EXTRACT_PROFILE=production ALLOWED_HOSTS=192.168.1.26 gunicorn --worker-class gevent main.wsgi:application  --log-file ../data/logs/gunicorn.log --<span class="built_in">bind</span> 192.168.1.26:8000  </span><br></pre></td></tr></table></figure><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">upstream eighty &#123;</span><br><span class="line">    server pip_django:8000; <span class="comment"># 对外服务IP</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># include    conf/mime.types;</span></span><br><span class="line">    <span class="comment"># the port your site will be served on</span></span><br><span class="line">    listen      9116;</span><br><span class="line">    <span class="comment"># the domain name it will serve for</span></span><br><span class="line">    server_name 0.0.0.0;   <span class="comment"># substitute by your FQDN and machine&#x27;s IP address</span></span><br><span class="line">    charset     utf-8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Max upload size</span></span><br><span class="line">    client_max_body_size 75M;   <span class="comment"># adjust to taste</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Django media</span></span><br><span class="line">    location /media  &#123;</span><br><span class="line">        <span class="built_in">alias</span> /opt/apps/app;      <span class="comment"># your Django project&#x27;s media files</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /static &#123;</span><br><span class="line">        <span class="built_in">alias</span> /opt/apps/app/build/static;     <span class="comment"># your Django project&#x27;s static files</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># Finally, send all non-media requests to the Django server.</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://eighty;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header Referer <span class="variable">$http_referer</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx_app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">~/Workspace/finsense/pipeline_model/conf:/etc/nginx/conf.d</span>    <span class="comment"># 配置目录</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">~/Workspace/finsense/pipeline_model/:/opt/apps/pipeline_model/</span>    <span class="comment"># 静态文件目录</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8001</span><span class="string">:8001</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">NGINX_PORT=8001</span></span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>特殊情况：drf提供了media文件，media文件作为静态文件通过nginx提供，但是返回原文链接中缺少了端口号</p><p>ip的问题，对外使用了127.0.0.1，修改后正常使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># base setting</span></span><br><span class="line">USE_X_FORWARDED_HOST = True</span><br><span class="line">SECURE_PROXY_SSL_HEADER = (<span class="string">&#x27;HTTP_X_FORWARDED_PROTO&#x27;</span>, <span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx config</span></span><br><span class="line">proxy_pass http://eighty;</span><br><span class="line">proxy_set_header X-Forwarded-Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">proxy_set_header Referer <span class="variable">$http_referer</span>; <span class="comment"># 解决跨域csrf</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="docker-volumes"><a href="#docker-volumes" class="headerlink" title="docker volumes"></a>docker volumes</h2><p>关闭服务并删除目录映射<br><strong>注意事项</strong>: 在关闭服务时，需要加上<code>-v</code>，原因是 提取服务与nginx服务间通过volume共享数据，如果不加<code>-v</code>选项，共享数据就会保留，会造成服务更新后共享数据不一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose down -v </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;应用部署&quot;&gt;&lt;a href=&quot;#应用部署&quot; class=&quot;headerlink&quot; title=&quot;应用部署&quot;&gt;&lt;/a&gt;应用部署&lt;/h2&gt;&lt;p&gt;django + gunicorn + nginx&lt;/p&gt;
&lt;h3 id=&quot;动静分离&quot;&gt;&lt;a href=&quot;#动静分离&quot; cl</summary>
      
    
    
    
    <category term="笔记" scheme="http://af1ash.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="deploy" scheme="http://af1ash.github.io/tags/deploy/"/>
    
    <category term="django" scheme="http://af1ash.github.io/tags/django/"/>
    
  </entry>
  
</feed>
